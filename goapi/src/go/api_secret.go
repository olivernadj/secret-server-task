/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

type AddSecretParams struct {
	Secret string
	ExpireAfter string
	expireAfterViews  string
}

type ErrorResponse struct {
	Message string `json:"message" xml:"message" `
}


func responseWriter(w http.ResponseWriter, r *http.Request, statusCode int, body interface{}) {
	w.WriteHeader(statusCode)
	if r.Header.Get("Accept") == "application/xml" {
		w.Header().Set("Content-Type", "application/xml; charset=UTF-8")
		x, err := xml.Marshal(body)
		if err != nil {
			log.Println(err)
			panic(err)
		}
		_, err = fmt.Fprint(w, string(x))
		if err != nil {
			log.Println(err)
			panic(err)
		}
	} else {
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		j, err := json.Marshal(body)
		if err != nil {
			panic(err)
		}
		_, err = fmt.Fprint(w, string(j))
		if err != nil {
			panic(err)
		}
	}
}


func (sp *AddSecretParams) Validate() error {
	if strings.TrimSpace(sp.Secret) == "" {
		return errors.New("secret must not be empty")
	}
	re := regexp.MustCompile("^[1-9][0-9]*$")
	matched := re.Match([]byte(sp.expireAfterViews))
	if matched == false {
		return errors.New("expireAfterViews must be greater than 0")
	}
	re = regexp.MustCompile("^[0-9]*$")
	matched = re.Match([]byte(sp.ExpireAfter))
	if matched == false {
		return errors.New("expireAfter must be an integer, equals or grater 0")
	}
	return nil
}


func AddSecret(w http.ResponseWriter, r *http.Request) {
	err := r.ParseForm()
	if err != nil {
		// 405 as swagger specified
		responseWriter(w, r, http.StatusMethodNotAllowed, ErrorResponse{Message:"invalid form data"})
		log.Println(err)
		return
	}
	p := r.Form
	sp := AddSecretParams{
		Secret: p.Get("secret"),
		expireAfterViews: p.Get("expireAfterViews"),
		ExpireAfter: p.Get("expireAfter"),
	}
	err = sp.Validate()
	if err != nil {
		// 405 as swagger specified
		responseWriter(w, r, http.StatusMethodNotAllowed, ErrorResponse{Message:string(err.Error())})
		return
	}
	expAfter, _ := strconv.ParseInt (sp.ExpireAfter, 10, 64)
	expCount, _ := strconv.ParseInt (sp.expireAfterViews, 10, 32)
    createdAt   := time.Now()
	secret := Secret{
		SecretText:sp.Secret,
		RemainingViews:int32(expCount),
		ExpiresAt: createdAt.Add( time.Duration(expAfter) * time.Minute),
		CreatedAt: createdAt,
	}
	err = secret.encrypt()
	if err != nil {
		// 405 as swagger specified
		responseWriter(w, r, http.StatusMethodNotAllowed, ErrorResponse{Message:"encryption error"})
		log.Println(err)
		return
	}
	err = secret.Save()
	if err != nil {
		// 405 as swagger specified
		responseWriter(w, r, http.StatusMethodNotAllowed, ErrorResponse{Message:"database connection error"})
		log.Println(err)
		return
	}
	decrypted, err := secret.getDecryptedSecret()
	if err != nil {
		// 405 as swagger specified
		responseWriter(w, r, http.StatusMethodNotAllowed, ErrorResponse{Message:"decryption error"})
		log.Println(err)
		return
	}
	secret.SecretText = decrypted
	responseWriter(w, r, http.StatusOK, secret)
}

func GetSecretByHash(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	hash, ok := vars["hash"]
	if !ok || len(hash) != 32 {
		// 404 as swagger specified
		responseWriter(w, r, http.StatusNotFound, ErrorResponse{Message:"invalid hash"})
		return
	}
	original := Secret{}
	err := LoadSecretFromDB(hash, &original)
	if err != nil{
		// 404 as swagger specified
		responseWriter(w, r, http.StatusNotFound, ErrorResponse{Message:"database connection error"})
		log.Println(err)
		return
	}
	if original.Hash == "" {
		// 404 as swagger specified
		responseWriter(w, r, http.StatusNotFound, ErrorResponse{Message:"not found"})
		return
	}
	response := original
	defer original.CountDown()
	decrypted, err := response.getDecryptedSecret()
	if err != nil {
		// 404 as swagger specified
		responseWriter(w, r, http.StatusNotFound, ErrorResponse{Message:"decryption error"})
		panic(err)
		return
	}
	response.SecretText = decrypted
	responseWriter(w, r, http.StatusOK, response)
}
