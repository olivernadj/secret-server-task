/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gorilla/mux"
	db "github.com/olivernadj/secret-server-task/goapi/src/go/redis"
	"log"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

type AddSecretParams struct {
	Secret string
	ExpireAfter string
	expireAfterViews  string
}



func AddSecret(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	err := r.ParseForm()
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed) // 405 as swagger specified
		log.Println(err)
		fmt.Fprint(w, err)
		return
	}
	p := r.Form
	sp := AddSecretParams{
		Secret: p.Get("secret"),
		expireAfterViews: p.Get("expireAfterViews"),
		ExpireAfter: p.Get("expireAfter"),
	}
	err = sp.Validate()
	if err != nil {
		w.WriteHeader(http.StatusMethodNotAllowed) // 405 as swagger specified
		fmt.Fprint(w, err)
		return
	}

	w.WriteHeader(http.StatusOK)
	expAfter, _ := strconv.ParseInt (sp.ExpireAfter, 10, 64)
	expCount, _ := strconv.ParseInt (sp.expireAfterViews, 10, 32)
	secret := Secret{
		SecretText:sp.Secret,
		RemainingViews:int32(expCount),
		ExpiresAt: time.Now().Add( time.Duration(expAfter) * time.Minute),
		CreatedAt: time.Now(),
	}
	secret.encrypt()
	j, _ := json.Marshal(secret)
	db.Setex(secret.Hash, expAfter, string(j))
	fmt.Fprint(w, string(j))

}

func GetSecretByHash(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	//w.WriteHeader(http.StatusOK)
	vars := mux.Vars(r)
	hash, ok := vars["hash"]
	if !ok || len(hash) != 32 {
		w.WriteHeader(http.StatusNotFound) // 404 as swagger specified
		return
	}
	j := db.MustGet(hash)
	if j == "" {
		w.WriteHeader(http.StatusNotFound) // 404 as swagger specified
		return
	}
	secret := Secret{}
	err := json.Unmarshal([]byte(j), &secret)
	if err != nil {
		w.WriteHeader(http.StatusNotFound) // 404 as swagger specified
		log.Println(err)
		fmt.Fprint(w, err)
		return
	}
	decrypted, err := secret.getDecryptedSecret()
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		log.Println(err)
		fmt.Fprint(w, err)
		return
	}
	secret.SecretText = decrypted
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "%+v\n", secret)
}


func (sp *AddSecretParams) Validate() error {
	if strings.TrimSpace(sp.Secret) == "" {
		return errors.New("secret must not be empty")
	}
	re := regexp.MustCompile("^[1-9][0-9]*$")
	matched := re.Match([]byte(sp.expireAfterViews))
	if matched == false {
		return errors.New("expireAfterViews must be greater than 0")
	}
	re = regexp.MustCompile("^[0-9]*$")
	matched = re.Match([]byte(sp.ExpireAfter))
	if matched == false {
		return errors.New("expireAfter must be an integer, equals or grater 0")
	}
	return nil
}