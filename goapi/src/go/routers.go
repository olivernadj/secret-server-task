/*
 * Secret Server
 *
 * This is an API of a secret service. You can save your secret by using the API. You can restrict the access of a secret after the certen number of views or after a certen period of time.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"net/http"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
	Monitor     bool
	Log			bool
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	sh := http.StripPrefix("/v1/ui/", http.FileServer(http.Dir("./swaggerui/")))
	router.PathPrefix("/v1/ui/").Handler(sh)

	summaryVec := BuildSummaryVec("http_response_time_milliseconds", "Latency Percentiles in Milliseconds")

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		if route.Log {
			handler = Logger(handler, route.Name)
		}
		if route.Monitor {
			handler = WithMonitoring(handler, route, summaryVec)
		}

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}


func Metrics(w http.ResponseWriter, r *http.Request) {
	p := promhttp.Handler()
	p.ServeHTTP(w, r)
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v1/",
		Index,
		true,
		true,
	},

	Route{
		"AddSecret",
		"POST",
		"/v1/secret",
		AddSecret,
		true,
		true,
	},

	Route{
		"GetSecretByHash",
		"GET",
		"/v1/secret/{hash}",
		GetSecretByHash,
		true,
		true,
	},

	Route{
		"Metrics",
		"GET",
		"/metrics",
		Metrics,
		false,
		false,
	},
}
